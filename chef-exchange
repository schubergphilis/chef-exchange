#!/bin/bash -

#### Globals #################################################################
# Assumptions we will make, some of them informed by options on command line.
#

KNIFE="/usr/local/bin/knife"
KNIFE_OPTS="--no-color --disable-editing"
KNIFE_CONFIG=""
BASE_DIR=""
DOWNLOAD=0
UPLOAD=0

#### Parsing Command-Line and Usage ##########################################
#

function parse_cmdl_args () {
    local opts="basedir:,knife:,kniferb:,download,upload,help"
    local args=$(getopt -o 'h' --long "help,${opts}" -n "$0" -- "$@")

    # whitout arguments parsed, help will take place
    [ $# -lt 1 -o $? != 0  ] && show_usage && exit 1

    # "infecting" the environment with command line args
    eval set -- $args
    for i do
        case $i in
            --help|-h)  show_usage && exit 1;;
            --basedir)  BASE_DIR=$2; shift 2 ;;
            --knife)    KNIFE=$2; shift 2 ;;
            --kniferb)  KNIFE_CONFIG=$2; shift 2 ;;
            --download) DOWNLOAD=1; shift ;;
            --upload)   UPLOAD=1; shift ;;
            --)         shift && break;;
        esac
    done
}

function show_usage () {
    cat <<EOM
help message shall be here!
EOM
}

#### Knife and Helpers #######################################################
#

function __knife () {
    local cmd=$1
    local opt=$2

    # building knife command and defining error file
    command="${KNIFE} ${cmd} ${KNIFE_OPTS} ${opt}"
    error_file=$(mktemp)

    output=$(${command} 2> ${error_file})

    if [ $? != 0 ]; then
        error_msg="$(cat ${error_file} 2> /dev/null)"
        rm -f ${error_file} > /dev/null 2>&1
        __die "Knife command: \"${command}\", Error: \"${error_msg}\""
    fi

    echo "${output}"
}

function __knife_list () {
    local subcommand=$*

    let i=0
    declare -a output=()
    while read -r line ; do
        # line starts with comment, we don't want
        ( echo $line |grep -q -E '^#' ) && continue
        # replacing spaces for "=" string
        line="$(echo $line |sed -r 's/\s+/=/g')"
        eval "output[$i]='${line}'"
        ((++i))
    done < <(__knife "${subcommand}" "--format=text")

    echo "${output[@]}"
}

function __knife_download () {
    local cookbook=$1
    local version=$2
    local directory=$3

    __knife "cookbook download ${cookbook}" \
        "--latest --force --dir ${directory}" > /dev/null

    origin_dir="${directory}/${cookbook}-${version}"
    dest_dir="${directory}/${cookbook}"

    # moving towards a directory that not contains version, default for chef
    mv $origin_dir $dest_dir || \
        __die "Can't move: \"${origin_dir}\" ->\"${dest_dir}\""
}

function __knife_show () {
    local entity=$1
    local item=$2
    local target=$3

    # empty out the target file first
    if [ -e $target ]; then
        cat /dev/null > $target
        __warn "File exists, contents OVERWROTE! \"${target}\""
    fi

    __knife "${entity} show ${item}" --format=json \
        |grep -v -E '^#' 1> $target
}

function __warn () {
    local message=$1
    echo "[WARN] $message" >&2
}

function __die () {
    local message=$1
    echo "[ERROR] $message" >&2
    exit 1
}

#### Chef Download and Upload ################################################
#

function chef_download_cookbook () {
    local dir_path=$1
    local entity=$2
    local cookbook=$3

    # variable placeholders to cookbook name and version
    name=""
    version=""

    # poor's man parsing of cookbook name and version
    eval "$(echo ${cookbook} |awk -F '=' '{print "name="$1" version="$2}')"

    if [ ! -z $name -o ! -z $version ]; then
        # cookbooks directory path
        target_dir="${dir_path}/${name}"

        echo "### \"${entity}\": \"${name}\" \"${version}\" (\"${target_dir}\")"

        if [ -e $target_dir ]; then
            __warn "Cookbook will be refreshed: \"${target_dir}\""
            rm -rf "$target_dir" || \
                __die "Can't remove directory: \"${target_dir}\""
        fi

        __knife_download "${name}" "${version}" "${dir_path}"
    else
        __warn "Can't parse cookbook's name and/or version (${cookbook})."
    fi

}

function chef_download_databag () {
    local dir_path=$1
    local entity=$2
    local databag=$3

    data_bag_dir="${dir_path}/${databag}"

    if [ ! -d $data_bag_dir ]; then
        mkdir  $data_bag_dir || \
            __die "Can't create directory: \"${data_bag_dir}\""
    fi

    echo "### \"${entity}\": \"${databag}\" (\"${data_bag_dir}\")"

    # listing attributes of current data-bag
    declare -a bags=($(__knife_list "${entity} show ${databag}"))

    for bag in "${bags[@]}" ; do
        target="${data_bag_dir}/${bag}.json"
        echo "#### \"${entity}\", \"${bag}\": \"${target}\""
        __knife_show "${entity}" "${databag} ${bag}" $target
    done
}

function chef_download () {
    local entity=$1

    echo "# Looking for Chef's entity: \"${entity}\""

    # defining where to locally store Chef data
    dir_name="$(echo "${entity}" |sed -r 's/\s+/_/g')"
    dir_path="${BASE_DIR}/${dir_name}"

    echo "## Target directory: \"${dir_path}\""
    if [ ! -d $dir_path ]; then
        mkdir $dir_path || __die "Can't create directory: ${dir_path}"
    fi

    #### Chef Download #######################################################
    #
    declare -a items=($(__knife_list "${entity} list"))
    #
    # TODO
    #   * check if there's items being listed, if not it should warn/die;
    #   * include parameter to ignore given entities;
    #
    for item in "${items[@]}"; do
        # we're not interested on "_default" environment, by default :-)
        [[ "${entity}" == "environment" && \
           "${item}" == "_default" ]] && continue

        if   [[ "$entity" == "cookbook" ]]; then
            #### Cookbooks Download ##########################################
            # Downloading the cookbook data toward the cookbook reserved
            # directory.
            #
            chef_download_cookbook "${dir_path}" "${entity}" "${item}"

        elif [[ "$entity" == "data bag" ]]; then
            #### Data Bags ###################################################
            # Data bags need to be interated using sub-command "list" in order
            # to discover elements on each data-bag and finally using "show"
            # to save it's json on the file-system
            #
            chef_download_databag "${dir_path}" "${entity}" "${item}"

        else
            #### Environments, Roles and Nodes ###############################
            # Or in other words, everyone that can be loaded with Knife's
            # "show" option are handled here.
            #
            target="${dir_path}/${item}.json"
            echo "### ${cmd}: \"${item}\" (\"${target}\")"
            __knife_show "${cmd}" "${item}" $target
        fi
    done
}

function chef_upload () {
    local entity=$1

    echo "# Uploading Chef's entity: \"${entity}\""

    # defining where to locally store Chef data
    dir_name="$(echo "${entity}" |sed -r 's/\s+/_/g')"
    dir_path="${BASE_DIR}/${dir_name}"

    echo "## Source directory: \"${dir_path}\""
    if [ ! -d $dir_path ]; then
        __die "Can't find directory: ${dir_path}"
    fi

    # errors will be reported afterwards, since array will have no items
    declare -a items=($(/bin/ls -1 ${dir_path} 2> /dev/null))

    for item in "${items[@]}"; do
        if   [[ "$entity" == "cookbook" ]]; then
            continue
        elif [[ "$entity" == "data bag" ]]; then
            echo "### Uploading \"${entity}\": \"${item}\" (\"${dir_path}\")"
            __knife "data bag create ${item}" > /dev/null
            chef_upload_databag "${dir_path}" "${item}"
        else
            target="${dir_path}/${item}"
            echo "### Importing \"${entity}\": \"${target}\""
            __knife "${entity} from file ${target}" > /dev/null
        fi
    done

    if [[ "$entity" == "cookbook" ]]; then
        echo "### Uploading cookbooks (\"${dir_path}\")"
        __knife "cookbook upload -a" "--cookbook-path ${dir_path}"
    fi
}

function chef_upload_databag () {
    local directory=$1
    local databag=$2

    declare -a bags=($(/bin/ls -1 ${directory}/${databag}/*.json 2> /dev/null))

    for bag in "${bags[@]}"; do
        echo "#### Uploading data-bag (\"${databag}\"): \"${bag}\""
        __knife "data bag from file ${databag} ${bag}" > /dev/null
    done
}

#### Command-Line and Boilerplates ###########################################
#

parse_cmdl_args $@

if [[ ( -z $BASE_DIR ) || ( ! -d $BASE_DIR ) ]]; then
    __die "BASE_DIR not not found at: \"${BASE_DIR}\""
fi

if [ ! -e $KNIFE ]; then
    __die "KNIFE not found at: \"${KNIFE}\""
fi

# knife configuration file option informed but file not found
if [[ ( ! -z $KNIFE_CONFIG ) && ( ! -e $KNIFE_CONFIG ) ]]; then
    __die "Knife config file (knife.rb) is not found at: \"${KNIFE_CONFIG}\""
else
    # will be placed among the default knife options
    KNIFE_OPTS="${KNIFE_OPTS} -c ${KNIFE_CONFIG}"
fi

# only download or upload at once
if [[ ( $DOWNLOAD == 0 && $UPLOAD == 0 ) || \
      ( $DOWNLOAD == 1 && $UPLOAD == 1 ) ]] ; then
    __die "Either --download or --upload must be informed. Check --help also."
fi

#### Main ####################################################################
#

declare -a commands=('environment' 'role' 'node' 'cookbook' 'data bag')

for cmd in "${commands[@]}" ; do
    [[ $DOWNLOAD == 1 ]] && chef_download "${cmd}"
    [[ $UPLOAD   == 1 ]] && chef_upload "${cmd}"
done

# EOF
